#! /usr/bin/python3 -uW all
# -*- coding: utf-8 -*-

usage="""
scrape-statcode-us-co - convert the Colorado Revised Statutes into Akoma Ntoso

See <https://en.wikipedia.org/wiki/Colorado_Revised_Statutes>. Given titles as
Open XML files, in order, this will output them as an Akoma Ntoso XML file.

Usage:	scrape-statcode-us-co [options] file [file ...]
Arguments:

	file		input .docx file from the bulk download site
	-o file		output file ('-' for stdout) (default: stdout)
	-n num		number of parallel threads (default: 2)
	-p num		number of Open Office processes (default: 1)
	-d		enable debuging output (default: warnings only)
"""

import sys
import os
import getopt
import lxml.etree as etree
import uno
import unohelper
import shlex
import subprocess
import time
import logging
import mimetypes
import enum
import collections
import concurrent.futures
import threading
import queue
import tempfile
import types
import re

##
# Entry function: Parse paramters, call main function.
#
def main():
	fout = sys.stdout.buffer
	debug = logging.INFO
	threads = 2
	processes = 1
	logging.SUPERDEBUG = logging.DEBUG-2 # XXX monkey fix
	logging.UBERDEBUG = logging.DEBUG-4

	# parse arguments
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'o:n:p:dh')
	except getopt.GetoptError:
		logging.fatal('getopt error {}'.format(usage))
		return 1

	for opt, arg in opts:
		if opt in {'-d', '--debug'}:
			if debug is logging.INFO:
				debug = logging.DEBUG
			elif debug is logging.DEBUG:
				debug = logging.SUPERDEBUG
			elif debug is logging.SUPERDEBUG:
				debug = logging.UBERDEBUG
			else:
				logging.warning("main unknown debugging level")
				debug = logging.DEBUG
		elif opt in {'-q', '--quiet'}:
			debug = logging.WARNING
		elif opt in {'-o'}:
			fout = arg
		elif opt in {'-n'}:
			threads = int(arg)
		elif opt in {'-p'}:
			processes = int(arg)
		elif opt in {'-h', '--help'}:
			print(opt, usage)
			return 0
		else:
			logging.fatal('invalid flag {}{}'.format(opt, usage))
			return 1

	if len(args) < 1:
		logging.fatal('need input files {}'.format(usage))
		return 1
	fns = args

	# configure
	logging.basicConfig(format='{levelname} {process}/{thread}/{funcName} {message}', style='{', level=debug)
	logging.addLevelName(logging.SUPERDEBUG, 'SUPERDEBUG')
	logging.addLevelName(logging.UBERDEBUG, 'UBERDEBUG')
#	logging.Logger.superdebug = lambda inst, msg, *args, **kwargs: inst.log(logging.SUPERDEBUG, msg, *args, **kwargs)
	logging.superdebug = lambda msg, *args, **kwargs: logging.log(logging.SUPERDEBUG, msg, *args, **kwargs)
#	logging.Logger.uberdebug = lambda inst, msg, *args, **kwargs: inst.log(logging.UBERDEBUG, msg, *args, **kwargs)
	logging.uberdebug = lambda msg, *args, **kwargs: logging.log(logging.UBERDEBUG, msg, *args, **kwargs)

	# do it
	ret = do_it(fns, fout, processes, threads)

	return ret

##
# Execute do_parse() against given filenames in parallel.
#
def do_it(fns, fout, nprocs, nthreads):
	ret = 0
	# start soffice processes
	procs = []
	for i in range(nprocs):
		#pipename, tmpd, p = OOFile.start_soffice()
		procs.append(OOFile.start_soffice())
	time.sleep(5)
	# xml body
	akn = etree.Element('akomaNtoso', nsmap={None: "http://docs.oasis-open.org/legaldocml/ns/akn/3.0"})
	act = etree.SubElement(akn, 'act')
	meta = etree.SubElement(act, 'meta')
	body = etree.SubElement(act, 'body')
	# submit tasks
	executor = concurrent.futures.ThreadPoolExecutor(max_workers=nthreads)
	futures = []
	for i,fn in enumerate(fns):
		pipename = procs[i % nprocs][0]
		# errq signals producer to fail
		errq = queue.Queue() # XXX beware IPC v. interthread
		future = executor.submit(do_parse, pipename, fn, errq)
		futures.append((future, errq))
	# complete tasks
	try:
		for xml in (future.result() for future,errq in futures):
			# TODO we should have a faster way to detect errors
			if xml is None:
				# breaking cleanly triggers else clause
				# XXX is this really shutting down executor?
				raise RuntimeError('do_parse failed: xml is None')
			body.append(xml)
	except BaseException as e:
		logging.critical('do_it exception: {} {}'.format(type(e), e))
		ret = 1
	else:
		tree = etree.ElementTree(akn)
		tree.write(fout)
	finally:
		# cleanup
		logging.info('do_it cleaning up')
		logging.debug('do_it poisoning queues and cancelling futures')
		for future,errq in reversed(futures):
			future.cancel()
			errq.put(False)
		logging.debug('do_it closing executor')
		executor.shutdown()
		logging.debug('do_it closing processes')
		for pipename, tmpd, p in procs:
			if p.poll() is None:
				logging.debug('do_it closing soffice')
				OOFile.terminate_soffice(OOFile.connect_soffice(pipename))
			p.wait()
			tmpd.cleanup()
	return ret

##
# Parse a file and return partial Akoma Ntoso XML.
#
def do_parse(pipename, fn, errq):
	logging.info('do_parse parsing: {}'.format(fn))
	xml = None
	try:
		paraq = queue.Queue(100)
		xmlq = queue.Queue(50)
		outq = queue.Queue() # XXX should we bound these?
		# open files, build threads
		# TODO different types of files?
		mime = mimetypes.guess_type(fn)
		if mime[0] in ('application/rtf','application/vnd.openxmlformats-officedocument.wordprocessingml.document'):
			filethread = threading.Thread(target=OOFile.run, args=(pipename, fn, errq, paraq))
		else:
			logging.critical('do_parse unknown filetype: {} {}'.format(fn, mime))
			return None
		parserthread = threading.Thread(target=OOFileParser.run, args=(paraq, xmlq, errq))
		builderthread = threading.Thread(target=XMLBuilder.run, args=(xmlq, outq, errq))
		# parse
		builderthread.start()
		parserthread.start()
		filethread.start()
		xml = outq.get()
		if xml is False: # TODO implement better queue poisoning
			xml = None
	except OSError as e:
		logging.critical('do_parse opening files: {}'.format(e))
		return None
	except BaseException as e:
		logging.critical('do_parse exception: {} {}'.format(type(e), e))
	logging.info('do_parse done: {}'.format(fn))
	# wait for completion of threads
	# TODO is this necessary?
	filethread.join()
	parserthread.join()
	builderthread.join()
	# return
	return xml

##
# A state machine that parses a stream of semi-structured document lines
# into partial Akoma Ntoso XML. The parse() function will consume the input
# and output an XML object.
#
class XMLBuilder:
	def __init__(self):
		# `state' is an ordered dictionary with the top-most
		# element of each type, which represents our heirarchy
		# of elements
		self.state = collections.OrderedDict()
		self.state['title'] = None
		self.state['article'] = None
		self.state['part'] = None
		self.state['subpart'] = None
		self.state['section'] = None
		self.state['subsection'] = None
		self.state['paragraph'] = None
		self.state['subparagraph'] = None
		self.state['subsubparagraph'] = None
	##
	#
	#
	@staticmethod
	def run(inq, outq, errq):
		try:
			builder = XMLBuilder()
			builder.parse(inq, outq, errq)
		except BaseException as e:
			logging.critical('XMLBuilder.run exception: {} {}'.format(type(e), e), exc_info=True)
			outq.put(False) # poison queue
			errq.put(False)
	##
	# Parse all messages in @inq and return an XML object.
	#
	def parse(self, inq, outq, errq):
		assert inq is not None
		# process messages
		while True:
			msg = inq.get()
			if msg is None: # poison pill
				outq.put(self.get_state_top())
				break
			elif msg is False:
				outq.put(False) # poison queue
				errq.put(False)
				break
			logging.superdebug('XMLBuilder.parse: {}'.format(msg))
			self.event(msg)
	##
	# Process a signal.
	#
	def event(self, signal):
		typ = signal['type']
		if typ in {'heirarchy'}:
			self.event_heirarchy(signal)
		else:
			raise RuntimeError('XMLBuilder: unknown event: {}'.format(signal))
	##
	# All heirarchical elements are essentially the same, except that only
	# sections and below have content and have different ID algorithms.
	#
	def event_heirarchy(self, signal):
		typ, enum, head, text, status = signal['subtype'], signal['enum'], signal['heading'], signal['content'], signal['status']
		# determine subtype
		if typ is None:
			typ = self.parse_heirarchy_type(enum)
		# create element
		el = etree.Element(typ)
		# info
		el.attrib['title'] = self.get_name(typ, enum)
		el.attrib['id'] = self.get_id(typ, enum)
		if status:
			el.attrib['status'] = status
		if enum:
			nel = etree.SubElement(el, 'num')
			nel.text = enum
		if head:
			hel = etree.SubElement(el, 'heading')
			hel.text = head
		if text:
			tel = etree.SubElement(el, 'content')
			pel = etree.SubElement(tel, 'p')
			pel.text = text
		# get parent (only title has no parent) and attach
		parentel = self.get_state_parent(typ)
		if parentel is not None:
			parentel.append(el)
		else:
			logging.debug('event_section no parent: {}'.format(signal))
		# update state
		self.set_state(el, typ)
	##
	# Determine the type of element from its enumeration.
	#
	# Note that 'I' may be a subparagraph, or it may be a
	# sub-subparagraph that comes after 'H' etc.
	#
	#  -------------------------
	# |  s   |       type       |
	#  -------------------------
	# |  1   | subsection       |
	# |  a   | paragraph        |
	# |  IV  | subparagraph     |
	# |  A   | sub-subparagraph |
	#  -------------------------
	#
	def parse_heirarchy_type(self, s):
		ret = 'subsection'
		if s.isdecimal():
			ret = 'subsection'
		elif s.islower():
			ret = 'paragraph'
		elif 'I' not in s and 'V' not in s and 'X' not in s:
			ret = 'subsubparagraph'
		elif s == 'I' and self.state['subsubparagraph'] is not None and self.state['subsubparagraph'][0] == 'H':
			ret = 'subsubparagraph'
		elif s == 'V' and self.state['subsubparagraph'] is not None and self.state['subsubparagraph'][0] == 'U':
			ret = 'subsubparagraph'
		elif s == 'X' and self.state['subsubparagraph'] is not None and self.state['subsubparagraph'][0] == 'W':
			ret = 'subdivision'
		else:
			logging.superdebug('heirarchy_type assume roman num: {}'.format(s))
			ret = 'subparagraph'
		return ret
	##
	#
	#
	def get_name(self, typ, enum):
		assert typ is not None
		name = typ[0].upper() + typ[1:]
		if enum is not None: # XXX if no enum, is this required to be unique?
			name += ' ' + enum
		return name
	##
	# XXX requires non-None parent to have id attribute?
	#
	def get_id(self, typ, enum):
		assert typ is not None and enum is not None
		parentel = self.get_state_parent(typ)
		if parentel is None:
			# XXX only top-most element's parent will be None?
			ident = '/' + typ + '-' + enum
		elif typ in {'section'}:
			ident = '/' + typ + '-' + enum
		elif XMLBuilder.test_above_section(typ):
			ident = parentel.attrib['id'] + '/' + typ + '-' + enum
		elif XMLBuilder.test_below_section(typ):
			ident = parentel.attrib['id'] + '/' + enum
		else:
			logging.critical('get_id unknown type: {}'.format(typ))
			raise RuntimeError('get_id unknown type: {}'.format(typ))
		return ident
	##
	# Test if type is below section type.
	#
	# TODO should probably make more reboust to changes in heirarchy tree
	#
	@staticmethod
	def test_below_section(typ):
		return typ in {'subsection', 'paragraph', 'subparagraph', 'subsubparagraph'}
	##
	# Test if type is below section type.
	#
	# TODO should probably make more reboust to changes in heirarchy tree
	#
	@staticmethod
	def test_above_section(typ):
		return typ in {'title', 'article', 'part', 'subpart'}
	##
	# Get the lowest non-None element above type, or None if its the highest.
	#
	def get_state_parent(self, typ):
		# get a reversed list of keys above typ
		keys = list(self.state.keys())
		keys = reversed(keys[:keys.index(typ)])
		# get bottom-most element above typ
		for key in keys:
			if self.state[key] is not None:
				return self.state[key]
		return None
	##
	# Get and return the top-most element.
	#
	def get_state_top(self):
		for key in self.state.keys():
			if self.state[key] is not None:
				return self.state[key]
	##
	# Update (and normalize) state.
	#
	def set_state(self, el, typ):
		# update state
		self.state[typ] = el
		# normalize state: clear all elements below type from state
		keys = list(self.state.keys())
		keys = keys[keys.index(typ)+1:]
		for key in keys:
			self.state[key] = None

regex_sec = r'^(\d+\-\d+\-[\d\.]+)\.\s\s+(.+)\.\s+(.+)'

##
# A state machine program that parses a stream of unstructured lines into
# a stream of structured elements.
#
# Its essentially a Mealy machine, whose output is a list of
# structured elements, which are returned on event(). The parse() function
# will drive the event loop and yield each such line.
#
# XXX need to track down those random heirarchical subheadings that
# pop up out of nowhere, and make sure they are not getting picked up
# as text
#
class OOFileParser:
	##
	#
	#
	class StateEnum(enum.IntEnum):
		init = 1 # TODO needed?
		idle = 3
		heirarchy = 4
		section = 5
		section_idle = 6
		section_note = 7
		section_note_one = 8
		section_note_two = 9
		text = 10
	##
	#
	#
	def __init__(self):
		self.state = self.StateEnum.init
		self.last_line_ended_with_colon = False
		self.stash = None
	##
	#
	#
	@staticmethod
	def run(inq, outq, errq):
		try:
			parser = OOFileParser()
			parser.parse(inq, outq, errq)
		except BaseException as e:
			logging.critical('OOFileParser.run exception: {} {}'.format(type(e), e), exc_info=True)
			outq.put(False) # poison queue
			errq.put(False)
	##
	# Parse messages from @inq and output resulting messages in @outq.
	#
	def parse(self, inq, outq, errq):
		assert inq is not None and outq is not None
		while True:
			inmsg = inq.get()
			if inmsg is None: # poison pill
				outq.put(None) # poison queue
				break
			elif inmsg is False:
				outq.put(False)
				errq.put(False)
				break
			for outmsg in self.event(inmsg):
				outq.put(outmsg)
	##
	# Consume an event and return a list of structured elements
	# in the form of {'type':, 'enum':, 'heading':, 'content':}.
	#
	# The event function is chosen by current state; the transition
	# function is (then) chosen by current state and the signal. As such,
	# its output is chosen by current state and the signal as well.
	#
	def event(self, signal):
		# XXX strip line
		signal['line'] = signal['line'].strip()
		# XXX fixups
		signal['line'] = OOFileParser.fixup(signal['line'])
		#
		if self.state == self.StateEnum.init:
			ret = self.event_init(signal)
		elif self.state == self.StateEnum.idle:
			ret = self.event_idle(signal)
		elif self.state == self.StateEnum.heirarchy:
			ret = self.event_heirarchy(signal)
		elif self.state == self.StateEnum.section:
			ret = self.event_section(signal)
		elif self.state == self.StateEnum.section_note:
			ret = self.event_section_note(signal)
		elif self.state == self.StateEnum.section_note_one:
			ret = self.event_section_note_one(signal)
		elif self.state == self.StateEnum.section_note_two:
			ret = self.event_section_note_two(signal)
		elif self.state == self.StateEnum.text:
			ret = self.event_text(signal)
		# XXX keep track of centered text preceeded by lines ending with ':'
		if self.state != self.StateEnum.idle:
			self.last_line_ended_with_colon = signal['line'].endswith(':')
		#
		return ret
	def event_init(self, signal):
		logging.uberdebug('init')
		# XXX skip first line
		return self.transition_idle(signal)
	def event_idle(self, signal):
		logging.uberdebug('idle')
		line, adjust, lmargin, weight, align = signal['line'], signal['adjust'], signal['lmargin'], signal['weight'], signal['align']
		if line == '':
			return self.transition_self(signal)
		elif lmargin > 0:
			return self.transition_text(signal)
		elif OOFileParser.test_sec(line, adjust):
			return self.transition_section(signal)
#		elif OOFileParser.test_subsec(line, adjust):
#			return self.transition_subsection(signal)
		elif OOFileParser.test_heirarchy(line):
			return self.transition_heirarchy(signal)
		elif OOFileParser.test_anonymous_heirarchy(line, adjust, weight):
			# XXX skip anonymous heirarchies
			return self.transition_self(signal)
		# XXX should we only be able to enter subheader state
		# from heirarchy state to prevent mistaking text for subheaders?
#		elif adjust == 'center' and not line.startswith('WARNING'):
		elif (adjust == 'center' or align == 'CENTER') and self.last_line_ended_with_colon is False:
			return self.transition_heirarchy_subheader(signal)
		else:
			# assume text attached to previous section/subsection
			return self.transition_text(signal)
	##
	# NOTE if we transition away, flush stashed output signal.
	#
	def event_heirarchy(self, signal):
		logging.uberdebug('heirarchy')
		line, adjust, weight, align = signal['line'], signal['adjust'], signal['weight'], signal['align']
		if line == '':
			# don't transition because we may get subheader
			return self.transition_self(signal)
		elif OOFileParser.test_sec(line, adjust):
			return self.transition_heirarchy_flush(self.transition_section, signal)
		elif OOFileParser.test_heirarchy(line):
			return self.transition_heirarchy_flush(self.transition_heirarchy, signal)
		elif OOFileParser.test_anonymous_heirarchy(line, adjust, weight):
			# XXX skip anonymous heirarchies
			return self.transition_self(signal)
		elif adjust == 'center' or align == 'CENTER': # XXX should we test on last_line_ended_with_colon?
			return self.transition_heirarchy_subheader(signal)
		else: # XXX is there something better to do here? will a subheader ever not be centered?
			return self.transition_heirarchy_flush(self.transition_text, signal)
	def event_section(self, signal):
		logging.uberdebug('section')
		line, adjust = signal['line'], signal['adjust']
		if line == '':
			return self.transition_idle(signal)
		# XXX put fixups into fixups()?
		elif line.endswith('\xa0weeks') or line == 'the use of an artificial limb':
			# fixup 8-42-107
			return self.transition_text(signal)
		elif line.startswith('$'):
			# fixup 9-4-109
			return self.transition_text(signal)
		elif OOFileParser.test_sec(line, adjust):
			return self.transition_section(signal)
#		elif OOFileParser.test_subsec(line, adjust):
#			return self.transition_subsection(signal)
		elif "Editor's note" in line:
			return self.transition_section_note(signal)
		else: # XXX is there something better to do here?
			return self.transition_text(signal)
	def event_section_note(self, signal):
		logging.uberdebug('section_note')
		line = signal['line']
		if line == '':
			return self.transition_section_note_one(signal)
		else:
			logging.warning('section_note assume one: {}'.format(signal))
			return self.transition_section_note_one(signal)
	def event_section_note_one(self, signal):
		logging.uberdebug('section_note_one')
		line, adjust = signal['line'], signal['adjust']
		if line == '':
			return self.transition_section_note_two(signal)
		elif OOFileParser.test_sec(line, adjust):
			return self.transition_section(signal)
#		elif OOFileParser.test_subsec(line, adjust):
#			return self.transition_subsection(signal)
		else:
			logging.warning('section_note_one assume two: {}'.format(signal))
			return self.transition_section_note_two(signal)
	def event_section_note_two(self, signal):
		logging.uberdebug('section_note_two')
		line, adjust = signal['line'], signal['adjust']
		if line == '':
			return self.transition_idle(signal)
#		elif OOFileParser.test_subsec(line, adjust):
#			return self.transition_subsection(signal)
		elif OOFileParser.test_sec(line, adjust):
			return self.transition_section(signal)
		else:
			logging.warning('section_note_two assume text: {}'.format(signal))
			return self.transition_text(signal)
	def event_text(self, signal):
		logging.uberdebug('text')
		line, adjust, lmargin = signal['line'], signal['adjust'], signal['lmargin']
		if line == '':
			return self.transition_self(signal)
		elif lmargin > 0:
			return self.transition_text(signal)
		elif line.endswith('\xa0weeks') or line == 'the use of an artificial limb':
			# XXX fixup 8-42-107
			return self.transition_text(signal)
		elif line.startswith('$'):
			# fixup various
			return self.transition_text(signal)
		elif OOFileParser.test_sec(line, adjust):
			return self.transition_section(signal)
#		elif OOFileParser.test_subsec(line, adjust):
#			return self.transition_subsection(signal)
		elif OOFileParser.test_heirarchy(line):
			return self.transition_heirarchy(signal)
		else:
			# assume text attached to previous section/subsection
			return self.transition_text(signal)
	def transition_self(self, signal):
		logging.uberdebug('self: {}'.format(signal))
		return []
	def transition_idle(self, signal):
		logging.uberdebug('idle: {}'.format(signal))
		self.state = self.StateEnum.idle
		return []
	##
	# Stash the output signal away and flush it when we leave the
	# heirarchy state.
	#
	def transition_heirarchy(self, signal):
		logging.debug('heirarchy: {}'.format(signal))
		line = signal['line']
		typ,enum = line.split(' ',1)
		typ = typ.lower()
		output = {'type': 'heirarchy', 'subtype': typ, 'name': line, 'enum': enum, 'heading': None, 'content': None, 'status': None}
		self.stash = output
		self.state = self.StateEnum.heirarchy
		return []
	##
	# Append input signal information to stashed output signal.
	#
	# XXX Always guard against anonymous heirarchies to avoid
	# crashes on lack of incomplete heirarchy in stash.
	#
	def transition_heirarchy_subheader(self, signal):
		logging.debug('subheader: {}'.format(signal))
		if self.stash is not None:
			line, weight = signal['line'], signal['weight']
			head, status = OOFileParser.parse_subheader(line)
			if head is not None:
				if self.stash['heading'] is not None:
					self.stash['heading'] += ' ' + head
				else:
					self.stash['heading'] = head
			if status is not None:
				if self.stash['status'] is not None:
					self.stash['status'] += ' ' + status
				else:
					self.stash['status'] = status
		else:
			logging.warning('subheader stash is None')
		self.state = self.StateEnum.heirarchy
		return []
	##
	# Flush stashed output signal
	#
	def transition_heirarchy_flush(self, f, signal):
		logging.uberdebug(f'h_flush {signal}')
		assert isinstance(f, types.MethodType)
		sig = self.stash
		logging.uberdebug(f'h_flush {sig}')
		self.stash = None
		ret = f(signal)
		ret.insert(0, sig)
		logging.uberdebug(f'h_flush {ret}')
		return ret
	def transition_section(self, signal):
		logging.uberdebug('section: {}'.format(signal))
		sec = OOFileParser.tokenize_section(signal['line']) # return enum, head, status, text, subsecl
		logging.uberdebug('section sec: {sec}')
		ret = [{'type': 'heirarchy', 'subtype': 'section', 'name': None, 'enum': sec[0], 'heading': sec[1], 'content': sec[3], 'status': sec[2]}]
		subsec = sec[4]
		while subsec is not None: # return enum, status, text, subsecl
			logging.uberdebug('section subsec: {}'.format(subsec))
			ret.append({'type': 'heirarchy', 'subtype': None, 'name': None, 'enum': subsec[0], 'heading': None, 'content': subsec[2], 'status': subsec[1]})
			subsec = subsec[3]
		self.state = self.StateEnum.section
		return ret
#	def transition_subsection(self, signal):
#		logging.uberdebug('subsection: {}'.format(signal))
#		subsec = OOFileParser.tokenize_subsection(signal['line'])
#		ret = []
#		while subsec is not None: # return enum, status, text, subsecl
#			logging.uberdebug('subsection subsec: {}'.format(subsec))
#			ret.append({'type': 'heirarchy', 'subtype': None, 'name': None, 'enum': subsec[0], 'heading': None, 'content': subsec[2], 'status': subsec[1]})
#			subsec = subsec[3]
#		self.state = self.StateEnum.section
#		return ret
	def transition_section_note(self, signal):
		logging.uberdebug('section_note: {}'.format(signal))
		self.state = self.StateEnum.section_note
		return []
	def transition_section_note_one(self, signal):
		logging.uberdebug('section_note_one: {}'.format(signal))
		self.state = self.StateEnum.section_note_one
		return []
	def transition_section_note_two(self, signal):
		logging.uberdebug('section_note_two: {}'.format(signal))
		self.state = self.StateEnum.section_note_two
		return []
	def transition_text(self, signal):
		logging.debug('text: {}'.format(signal))
		self.state = self.StateEnum.text
		return []
	#
	# XXX these methods are complete hacks
	#
	@staticmethod
	def test_sec(line, adjust):
		m = re.search(regex_sec, line)
		return m is not None
#		return len(line) and '-' in line and line.split('-',1)[0][-1].isdigit() and adjust != 'center' and line[0].isdigit()
	@staticmethod
	def test_subsec(line, adjust):
		return len(line) and '\xa0' in line and line[0] == '(' and ')' in line and adjust != 'center' and ' ' not in line.split(')',1)[0] and '_' not in line.split(')',1)[0] and '\xa0' not in line.split(')',1)[0]
	@staticmethod
	def test_heirarchy(line):
		# XXX should there be a space after each?
		# XXX is it always a digit after the word?
		# XXX Title 24, Article 60, Part 22/25 have articles within!?
		# XXX Section 14-5-609 starts Part C, so alphanumeric?
		return len(line) and (line.startswith('TITLE ') and line.split('TITLE ',1)[1][0].isdigit() or line.startswith('PART ') and line.split('PART ',1)[1][0].isalnum() or line.startswith('SUBPART ') and line.split('SUBPART ',1)[1][0].isalnum() or line.startswith('ARTICLE ') and line.split('ARTICLE ',1)[1][0].isdigit()) and not line.endswith('.')
	##
	# Test for anonymous (untyped, only with heading) heirarchies.
	#
	# XXX need more robust logic for checking 'A.' types
	#
	@staticmethod
	def test_anonymous_heirarchy(line, adjust, weight):
		return adjust == 'center' and (weight == 'bold' or line.startswith('A.') or line.startswith('B.') or line.startswith('C.') or line.startswith('D.'))
	##
	#
	#
	@staticmethod
	def parse_subheader(s):
		status = None
		if s.endswith('(Reserved)'):
			s,_ = s.rsplit('(Reserved)',1)
			status = 'incomplete'
		return s or None, status
	##
	# Return a parsed section and with any subsection(s).
	#
	# XXX sometimes the header element has the first enum, e.g., 'header (a)'
	#
	@staticmethod
	def tokenize_section(line):
		m = re.search(regex_sec, line)
		if m:
			enum = m.group(1)
			heading = m.group(2)
			text = m.group(3)
			return enum, heading, None, text, None
		l = line.split('\xa0')
		logging.uberdebug('tokenize_section: {}'.format(l))
		l = [s.strip() for s in l]
		enum = head = status = subsecl = None
		textl = [] # TODO should we join? or should they be separate <p>?
		for n,s in enumerate(l):
			if s == '':
				pass
			elif enum is None:
				enum = OOFileParser.parse_sec_enum(s)
				logging.uberdebug(f'tokenize_section enum: {enum}')
			elif head is None:
				head,status = OOFileParser.parse_sec_head(s)
				logging.uberdebug('tokenize_section head: {} {}'.format(head, status))
#			elif OOFileParser.test_enum(s):
#				subsecl = OOFileParser.tokenize_subsection_r(l[n:])
#				break # input has been consumed
			else:
				textl.append(s)
		text = str.join(' ', textl) or None
#		return enum, head, status, text, subsecl
		return enum, head, status, text, None
	##
	# Return a parsed section string.
	#
	@staticmethod
	def parse_sec_enum(s):
		m = re.search(regex_sec, s)
		if m:
			return m.group(1)
		return s.rstrip('.')
	##
	# Return a parsed heading string.
	#
	@staticmethod
	def parse_sec_head(s):
		status = None
		if s.endswith('(Repealed)'):
			s,_ = s.rsplit('(Repealed)',1)
			status = 'removed'
		return s.strip().rstrip('.'), status
	##
	# Return a parsed subsection.
	#
#	@staticmethod
#	def tokenize_subsection(line):
#		l = line.split('\xa0')
#		logging.uberdebug('tokenize_subsection: {}'.format(l))
#		l = [s.strip() for s in l]
#		ret = OOFileParser.tokenize_subsection_r(l)
#		return ret
	##
	# Parse subsection(s) from a simply tokenized string.
	#
	# XXX whether its a sub-subsection or another type should be
	# decided at higher layers
	#
#	@staticmethod
#	def tokenize_subsection_r(l):
#		logging.uberdebug('tokenize_subsection_r: {}'.format(l))
#		enum = status = subsecl = None
#		textl = []
#		for n,s in enumerate(l):
#			if s == '':
#				pass
#			# this subsection's enum
#			elif enum is None:
#				enum,text = OOFileParser.parse_subsec_enum(s)
#				logging.uberdebug('tokenize_subsection_r enum: {} {}'.format(repr(enum), repr(text)))
#				if text is not None:
#					textl.append(text)
#			# repealed
#			# XXX this should be a note or history
#			elif OOFileParser.test_subsec_repealed(s):
#				textl.append(OOFileParser.parse_subsec_repealed(s))
#				status = 'removed'
#			# enum indicating a new sub-subsection
#			elif OOFileParser.test_enum(s):
#				logging.uberdebug('tokenize_subsection_r recurs: {}'.format(l[n:]))
#				subsecl = OOFileParser.tokenize_subsection_r(l[n:])
#				break # input has been consumed
#			# text for this subsection
#			else:
#				logging.uberdebug('tokenize_subsection_r text: {}'.format(s))
#				textl.append(s)
#		text = str.join(' ', textl)
#		if text == 'Repealed.' or text == 'Repealed':
#			text = None
#			status = 'removed'
#		text = text or None
#		return enum, status, text, subsecl
	##
	# Test if string represents an enumeration.
	#
	@staticmethod
	def test_enum(s):
	#	if s[0] == '(' or '(' in s and s[-1] == ')':
		if len(s) >= 3 and (s[0] == '(' or '(' in s and s[-1] == ')') and s[-2] != '.':
			return True
#		elif s[0] == '(' and s[-1] == ')' and (') to (' in s or ') and (' in s):
#			return True
		return False
	##
	# Parse and return an enumeration and text before enumeration (if any).
	#
	# XXX how to specify range values for num in Akoma Ntoso?
	# XXX how will choice of enum affect id attribute? whitespace?
	#
	@staticmethod
	def parse_subsec_enum(s):
		if ') to (' in s:
			one,two = s.strip('(').split(') to (')
			two,text = two.split(')',1)
			enum = one + ' to ' + two
		elif ') and (' in s:
			one,two = s.strip('(').split(') and (')
			two,text = two.split(')',1)
			enum = one + ' and ' + two
		else:
			enum,text = s.split(')',1)
			if len(text) and text[0] == ' ':
				# fixup '(num) text'
				text = text.strip()
			enum = enum.strip('(').strip(')')
		return enum, text or None
	##
	#
	#
	@staticmethod
	def test_subsec_repealed(s):
		return s.startswith('(Deleted')
	##
	# XXX this should be a note or history
	#
	@staticmethod
	def parse_subsec_repealed(s):
		return s.strip('(').strip(')')
	##
	# Perform specific fixups on string and return fixed-up string.
	#
	@staticmethod
	def fixup(line):
		orig = line
		# sections
		line = line.replace('this part\xa05', 'this part 5')
		line = line.replace('property\xa0-\xa0nonprofit', 'property - nonprofit')
		line = line.replace('defend\xa0-\xa0standing', 'defend - standing')
		line = line.replace('complaint\xa0-\xa0service', 'complaint - service')
		line = line.replace('article\xa064', 'article 64')
		line = line.replace('8-17-105.Compliance standard.', '8-17-105.\xa0\xa0Compliance standard.')
		# subsections
		if line.startswith('(4)  '):
			line = '(4)\xa0\xa0' + line[5:]
		elif line.startswith('(II) '):
			line = '(II)\xa0\xa0' + line[5:]
		line = line.replace('this part\xa05', 'this part 5')
		line = line.replace('BTU/H\xa0FT', 'BTU/H FT')
		line = line.replace('by section\xa07-62-1104', 'by section 7-62-1104')
		line = line.replace('of subsections\xa0(1) and', 'of subsections (1) and')
		line = line.replace('title\xa0shall', 'title shall')
		line = line.replace('article\xa060', 'article 60')
		line = line.replace('section\xa05-12-102', 'section 5-12-102')
		line = line.replace('section\xa07-64-1205', 'section 7-64-1205')
		line = line.replace('section\xa07-64-601', 'section 7-64-601')
		# can't remember
		line = line.replace('article\xa0V', 'article V')
		line = line.replace('§§\xa01', '§§ 1')
		line = line.replace(' §\xa038-35-106.5', ' § 38-35-106.5')
		# ret
		if orig is not line:
			logging.debug('fixup replace: {} {}'.format(repr(orig), repr(line)))
		return line

##
#
#
class OOFile():
	##
	#
	#
	@staticmethod
	def run(pipename, fn, errq, outq):
		try:
			OOFile.parse(pipename, fn, errq, outq)
		except BaseException as e:
			logging.critical('OOFile.run exception: {} {}'.format(type(e), e))
			outq.put(False) # poison queue
	##
	# Open file using desktop and parse and enqueue messages representing paragraphs.
	#
	@staticmethod
	def parse(pipename, fn, errq, outq):
		assert fn is not None and outq is not None
		doc = None
		# get desktop
		desktop = OOFile.connect_soffice(pipename)
		if not desktop:
			logging.critical('OOFile.parse no desktop')
			outq.put(False)
			return
		# open file
		url = unohelper.systemPathToFileUrl(os.path.abspath(fn))
		try:
			doc = desktop.loadComponentFromURL(url ,'_blank', 0, (uno.createUnoStruct('com.sun.star.beans.PropertyValue', 'ReadOnly', 0, True, 0),))
		except uno.getClass('com.sun.star.lang.IllegalArgumentException') as e:
			logging.critical('OOFile.parse file not found: {}'.format(e))
			outq.put(False)
			return
		except uno.getClass('com.sun.star.lang.DisposedException') as e:
			logging.critical('OOFile.parse desktop bridge died: {}'.format(e))
			outq.put(False)
			return
		except uno.getClass('com.sun.star.uno.RuntimeException') as e:
			logging.critical('OOFile.parse desktop exception: {}'.format(e))
			outq.put(False)
			return
		if doc is None:
			logging.critical('OOFile.parse doc is None')
			outq.put(False)
			return
		# get the com.sun.star.text.Text service and get an XEnumeration of com.sun.star.text.Paragraph objects from the XEnumerationAccess
		for para in OOFile.XEnumeration(doc.getText()):
			lmargin = None
			adjust = None
			weightn = -1
			style = None
			align = None
			# skip non-paragraphs
			if not para.supportsService('com.sun.star.text.Paragraph'):
				continue
			# get left margin
			if para.supportsService('com.sun.star.style.ParagraphProperties') and hasattr(para, 'ParaLeftMargin'):
				lmargin = para.ParaLeftMargin
			# get adjustment
			if para.supportsService('com.sun.star.style.ParagraphProperties') and hasattr(para, 'ParaAdjust'):
				adjustn = para.ParaAdjust
			if para.supportsService('com.sun.star.style.ParagraphProperties') and hasattr(para, 'ParaTabStops') and hasattr(para.ParaTabStops[0], "Alignment"):
				align = para.ParaTabStops[0].Alignment.value
			ss = []
			# get an XEnumeration of com.sun.star.text.TextPortion objects
			for portion in OOFile.XEnumeration(para):
				# skip non-text portions
				if portion.TextPortionType != 'Text':
					continue
				# get portion string
				ss.append(portion.getString())
				# get the last portion's weight
				if portion.supportsService('com.sun.star.style.CharacterProperties') and hasattr(portion, 'CharWeight'):
					weightn = portion.CharWeight
				# get the last portion's style
				if portion.supportsService('com.sun.star.style.ParagraphProperties') and hasattr(portion, 'ParaStyleName'):
					style = portion.ParaStyleName # XXX need to strip?
			# interpret data
			s = str.join('', ss)
			if adjustn == 3: # com.sun.star.style.ParagraphAdjust
				adjust = 'center'
			elif adjustn == 0:
				adjust = 'left'
			elif adjustn == 2:
				adjust = 'block'
			else:
				logging.warning('OOFile.parse unknown adjust: {}'.format(adjustn))
				adjust = None
			if round(weightn) == 100: # com.sun.star.awt.FontWeight
				weight = 'normal'
			elif round(weightn) == 150:
				weight = 'bold'
			elif weightn == -1:
				weight = None
			else:
				logging.warning('OOFile.parse unknown weight: {}'.format(weightn))
				weight = None
			message = {'align': align, 'adjust': adjust, 'lmargin': lmargin, 'weight': weight, 'style': style, 'line': s}
			logging.uberdebug(f'{message}')
			# check for error message
			if errq.qsize() > 0:
				try:
					inmsg = errq.get(block=False)
					OOFile.close(doc)
					outq.put(False) # poison output queue and exit
					return
				except queue.Empty as e:
					logging.warning('OOFile.parse errq size weirdness')
			# enqueue message
			outq.put(message)
		# close file
		OOFile.close(doc)
		# poison queue
		outq.put(None)
	##
	#
	#
	@staticmethod
	def close(doc):
		# See <https://wiki.openoffice.org/wiki/Documentation/DevGuide/OfficeDev/Closing_Documents>.
		logging.debug('OOFile closing: {}'.format(doc))
		try:
			if doc is not None:
				# XXX we should check for the com.sun.star.util.XCloseable interface first
				doc.close(True)
		except uno.getClass('com.sun.star.lang.DisposedException') as e:
			logging.critical('OOFile.parse uno.DisposedException: {} {}'.format(doc, e))
		except uno.getClass('com.sun.star.uno.RuntimeException') as e:
			logging.critical('OOFile.parse uno.RuntimeException: {} {}'.format(doc, e))
	##
	# Get an XEnumeration of objects from a given object supporting the
	# XEnumerationAccess interface.
	#
	@staticmethod
	def XEnumeration(obj):
		xenum = obj.createEnumeration()
		while xenum.hasMoreElements():
			yield xenum.nextElement()
	##
	# TODO make POSIX/Windows agnostic, e.g., USERPROFILE instead of HOME.
	#
	@staticmethod
	def start_soffice(pipename=None):
		if pipename is None:
			pipename = 'officepipe-'+next(tempfile._RandomNameSequence())
		tmpd = tempfile.TemporaryDirectory()
		cmd = 'soffice --writer --accept="pipe,name='+pipename+';urp;StarOffice.ServiceManager" --norestore --nologo --headless --nolockcheck'
		p = subprocess.Popen(shlex.split(cmd), env={"HOME": tmpd.name}, stdin=subprocess.DEVNULL, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
		return pipename, tmpd, p

	##
	# Connect to a running soffice instance and return a XDesktop object.
	#
	@staticmethod
	def connect_soffice(pipename, tries=5, sleep=5):
		context = None
		desktop = None
		local = uno.getComponentContext()
		resolver = local.ServiceManager.createInstanceWithContext('com.sun.star.bridge.UnoUrlResolver', local)
		resolvurl = 'uno:pipe,name='+pipename+';urp;StarOffice.ComponentContext'
		for i in range(tries):
			try:
				context = resolver.resolve(resolvurl)
				if context is not None:
					desktop = context.ServiceManager.createInstanceWithContext('com.sun.star.frame.Desktop', context)
			except uno.getClass('com.sun.star.lang.DisposedException') as e:
				logging.critical('OOFile.connect_soffice bridge died: {}'.format(e))
				break
			except uno.getClass('com.sun.star.connection.NoConnectException') as e:
				logging.debug('OOFile.connect_soffice failed to connect {} / {}'.format(i+1, tries))
				time.sleep(sleep)
		if context is None or desktop is None:
			logging.warning('OOFile.connect_soffice failed to connect')
		return desktop

	##
	#
	#
	@staticmethod
	def terminate_soffice(desktop):
		if desktop is None:
			logging.debug('OOFile.terminate_soffice desktop None')
			return False
		try:
			desktop.terminate() # kills soffice
		except uno.getClass('com.sun.star.lang.DisposedException') as e: # XXX needed?
			logging.critical('OOFile.terminate_soffice uno.DisposedException: {} {}'.format(desktop, e))
			return False
		except uno.getClass('com.sun.star.uno.RuntimeException') as e:
			logging.critical('OOFile.terminate_soffice uno.RuntimeException: {} {}'.format(desktop, e))
			return False
		return True

# do it
if __name__ == "__main__":
	sys.exit(main())

