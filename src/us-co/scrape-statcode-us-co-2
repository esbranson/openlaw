#!/usr/bin/python3

usage="""
scrape-statcode-us-co - convert the Colorado Revised Statutes into Akoma Ntoso

Get the data from <https://leg.colorado.gov/colorado-revised-statutes>.

Usage: scrape-statcode-us-co [options] zipfile dcl dtd xslt
Arguments:
    zipfile     ZIP file containing the official CRS data
    dcl         SGML declaration
    dtd         SGML document type definition
    xslt        XSL transform from CRS markup to Akoma Ntoso
    
    -t title    output specific titles (one flag for each)
    -o file     output file ('-' for stdout) (default: stdout)
    -n threads  maxmim number of parallel threads (default: 2)
    -d          enable debuging output (default: warnings only)
"""

import sys
import logging
import getopt
import os
import zipfile
import tempfile
import shutil
import subprocess
try:
    from lxml import etree
except:
    import xml.etree.ElementTree as etree

##
# Entry function: Parse paramters, call main function.
#
def main():
    titles = []
    fout = sys.stdout.buffer
    threads = 2
    all_titles = list(str(n).zfill(2) for n in range(1,44))
    all_titles.append("25.5")
    all_titles.sort()

    # Configure logging.
    logging.basicConfig(format='{levelname} {process}/{threadName}: {message}', style='{', level=logging.WARNING)

    # Parse arguments.
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], 'o:n:t:dh')
    except getopt.GetoptError:
        logging.fatal('Getopt error. {}'.format(usage))
        return 1

    for opt, arg in opts:
        if opt in {'-h', '--help'}:
            print(opt, usage)
            return 0
        elif opt in {'-d', '--debug'}:
            if logging.getLogger().level is logging.WARNING:
                logging.getLogger().setLevel(logging.INFO)
            elif logging.getLogger().level is logging.INFO:
                logging.getLogger().setLevel(logging.DEBUG)
        elif opt in {'-o'}:
            fout = arg
        elif opt in {'-n', '--threads'}:
            threads = int(arg)
        elif opt in {'-t', '--title'}:
            titles.append(arg.zfill(2))
        else:
            logging.fatal('Invalid flag \"{}\". {}'.format(opt, usage))
            return 1

    if len(args) < 4:
        logging.fatal('Need input files. {}'.format(usage))
        return 1
    zfn = os.path.abspath(args[0])
    dclfn = os.path.abspath(args[1])
    dtdfn = os.path.abspath(args[2])
    xsltfn = os.path.abspath(args[3])
    
    # Do all titles if none specified.
    if len(titles) == 0:
        titles = all_titles

	# Do it.
    return do_it(zfn, dclfn, dtdfn, xsltfn, titles, fout, threads)

##
# Do it.
#
def do_it(zfn, dclfn, dtdfn, xsltfn, titles, fout, threads): # Do it.
    with zipfile.ZipFile(zfn) as zf:
        for title in titles:
            # TODO: Convert each desired title in executors.
            logging.info('Converting title {}'.format(title))
            with zf.open('TITLES/title' + title + '.txt') as sgmlf:
                new_sgmlf = fix_sgml(sgmlf, dtdfn)
                xmlf = convert_sgml2xml(new_sgmlf, dclfn)
                akn = convert_xml2akn(xmlf, xsltfn)

##
# Given an official CRS SGML file, return a fixed SGML file. We need to
# add a DTD declaration, and fix various issues in the file.
#
# TODO: Run a diff against the file to fix various issues.
# XXX: Mind the newlines on different architectures!?
#
def fix_sgml(sgmlf, dtdfn):
    new_sgmlf = tempfile.NamedTemporaryFile()
    new_sgmlf.write(('<!DOCTYPE CRS SYSTEM "' + dtdfn + "\">\n").encode())
    shutil.copyfileobj(sgmlf, new_sgmlf)
    return new_sgmlf

##
# Convert a CRS SGML file file into XML.
#
# NOTE: Requires OpenSP.
#
def convert_sgml2xml(sgmlf, dclfn):
    xmlf = tempfile.NamedTemporaryFile(mode='w+')
    subprocess.run(["osx", dclfn, sgmlf.name], stdout=xmlf) # stderr=subprocess.DEVNULL
    xmlf.seek(0)
    return xmlf

##
# Convert a CRS SGML-as-XML file into Akoma Ntoso XML.
#
# XXX: TODO.
#
def convert_xml2akn(xmlf, xsltfn):
    xml = etree.parse(xmlf, etree.XMLParser(recover=True))
    xslt = etree.XSLT(etree.parse(xsltfn))
    akn = xslt(xml)
    akn.write(sys.stdout.buffer, pretty_print=True)

# <https://docs.python.org/3/library/__main__.html>
if __name__ == "__main__":
	main()

