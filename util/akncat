#! /usr/bin/python3 -uW all
# -*- coding: utf-8 -*-

usage="""Usage: akncat [OPTION]... [FILE]...
Concatenate Akoma Ntoso FILE(s) sections to standard output.

  -a, --abbr         toggle output of document abbreviation (default: yes)
  -n, --nums         toggle output of section numbers (default: yes)
  -t, --headings     toggle output of title/heading/subheading (default: yes)
  -c, --content      toggle output of section content (default: yes)
  -r, --refs         toggle output of section references (default: no)
  -s, --status       toggle output of sections with statusType "removed" (default: no)
  -h, --help         display this help and exit

With no FILE, or when FILE is -, read standard input."""

import sys
import getopt
import logging
import re
try: import lxml.etree as etree
except ImportError: import xml.etree.ElementTree as etree # XXX lxml required

xmlns = "http://docs.oasis-open.org/legaldocml/ns/akn/3.0"
uslm_ns = "http://schemas.gpo.gov/xml/uslm"

do_repealed = False
do_abbr = True
do_number = True
do_heading = True
do_content = True
do_notes = False
loglvl = logging.DEBUG

##
# Entry function. Parse parameters, call main function.
#
def main():
	logging.basicConfig(format='{levelname:8s}: {message}', style='{', level=loglvl)
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'trncash')
	except getopt.GetoptError as e:
		logging.fatal('getopt error: {}'.format(e))
		print(usage)
		sys.exit(2)
	for opt, arg in opts:
		if opt in {'-t', '--headings'}:
			do_heading = not do_heading
		elif opt in {'-r', '--refs'}:
			do_notes = not do_notes
		elif opt in {'-n', '--nums'}:
			do_number = not do_number
		elif opt in {'-c', '--content'}:
			do_content = not do_content
		elif opt in {'-a', '--abbr'}:
			do_abbr = not do_abbr
		elif opt in {'-s', '--status'}:
			do_repealed = not do_repealed
		elif opt in {'-h', '--help'}:
			print(usage)
			sys.exit(1)
	if len(args) < 1:
		args = ['-']
	try:
		for fn in args:
			if fn == '-':
				f = sys.stdin
			else:
				f = open(fn)
			with f as f:
				tree = etree.parse(f) # throws ParseError
			if tree.getroot().nsmap[None] == xmlns: # XXX lxml required
				parse_akoma_ntoso(tree)
			elif tree.getroot().nsmap[None] ==  uslm_ns: # XXX lxml required
				parse_uslm(tree)
	except (BrokenPipeError,KeyboardInterrupt):
		pass

##
# Parse a USLM file.
#
def parse_uslm(tree):
	ns = {'uslm': uslm_ns}
	section_path = '//uslm:section'
	content_path = './/{' + uslm_ns + '}content'

	for section in tree.xpath(section_path, namespaces=ns):
		abbr = ''
		enum = ''
		heading = ''
		content = ''
		if do_abbr:
			# Find highest parent with an identifier.
			#abbr = ' '.join(root.tag, root.find('.//{' + uslm_ns + '}num'))
			pass
		if do_number:
			pass
		if do_heading:
			pass
		if do_content:
			content = ' '.join(etree.tostring(el, encoding='unicode', method='text').strip() for el in section.iterfind(content_path))
		print(abbr + enum + heading + content)

##
# TODO
#
def parse_akoma_ntoso(tree):
	numre = '{' + xmlns + '}num'
	headingre = '{' + xmlns + '}heading'
	contentre = './/{' + xmlns + '}content/*'
	flatcontentre = './/{' + xmlns + '}content'
	metare = '{' + xmlns + '}meta'
	abbrre = '{' + xmlns + '}abbr'
	if do_repealed:
		path = '//akn:section'
	else:
		path = '//akn:section[not(contains(@status, "removed"))]'
	sections = tree.xpath(path, namespaces={'akn': xmlns})
	trans = str.maketrans('“”’\t', '""\' ', '\n')
	abbr = ''
	if do_abbr:
		el = tree.getroot()[0]
		for subel in el:
			if subel.tag != metare and len(subel) and abbrre in subel[0].attrib:
				abbr = subel[0].attrib[abbrre] + ' '
	for section in sections:
		enum = ''
		heading = ''
		content = ''
		if do_number:
			el = section.find(numre)
			if el is not None:
				enum = el.text+'. '
		if do_heading:
			el = section.find(headingre)
			if el is not None:
				heading = el.text+'. '
		if do_content:
			els = section.iterfind(contentre)
			content = ' '.join(''.join(el.itertext()).translate(trans).strip() for el in els)
			if len(content) == 0:
				els = section.iterfind(flatcontentre)
				content = ' '.join(''.join(el.itertext()).translate(trans).strip() for el in els)
		print(abbr + enum + heading + content)

if __name__ == "__main__":
	main()

